/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 09 15:28:04 GMT 2024
 */

package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.example.KMP;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KMP_ESTest extends KMP_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KMP kMP0 = new KMP();
      int[] intArray0 = kMP0.findAllOccurrences("?8 W>)gat_*qUe_bb", "t cnnot e nul");
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KMP kMP0 = new KMP();
      int[] intArray0 = kMP0.findAllOccurrences("Hp,|z~~%z3&tvo_bCm", "ZS 8\"K{`.");
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KMP kMP0 = new KMP();
      int[] intArray0 = kMP0.findAllOccurrences("$*6_r>RJ", "$*6_r>RJ");
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KMP kMP0 = new KMP();
      int[] intArray0 = kMP0.findAllOccurrences("$*6_r>RJ", "3>xt cn nobe n?HS");
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KMP kMP0 = new KMP();
      int[] intArray0 = kMP0.findAllOccurrences("", "GG7A");
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KMP kMP0 = new KMP();
      int[] intArray0 = kMP0.findAllOccurrences("", "");
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      KMP kMP0 = new KMP();
      // Undeclared exception!
      try { 
        kMP0.findAllOccurrences("+P", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern can not be null
         //
         verifyException("org.example.KMP", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KMP kMP0 = new KMP();
      // Undeclared exception!
      try { 
        kMP0.findAllOccurrences((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Text can not be null
         //
         verifyException("org.example.KMP", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KMP kMP0 = new KMP();
      int[] intArray0 = kMP0.findAllOccurrences("Text can not be null", "?");
      assertEquals(0, intArray0.length);
  }
}
